

activity_venerate_ancestors = {
	expiration_days = 30
	has_activity_window = yes
	days_until_auto_start = 2
	color = { 0.56 0.66 0.07 1 } # Plant Green
	valid = {
		activity_owner = {
			is_alive = yes
			is_imprisoned = no
		}
	}
	on_spawn = {
		invite_character_to_activity = activity_owner
		accept_invitation_for_character = activity_owner
		activity_owner = {
			every_courtier = {
				limit = {
					dynasty = scope:activity.activity_owner.dynasty
					OR = {
						is_available_for_activity_trigger = yes
						is_available_for_child_activity_trigger = yes
					}
				}
				add_to_temporary_list = potential_guests
			}
			every_vassal_or_below = {
				limit = {
					dynasty = scope:activity.activity_owner.dynasty
					OR = {
						is_available_for_activity_trigger = yes
						is_available_for_child_activity_trigger = yes
					}
				}
				add_to_temporary_list = potential_guests
			}
			every_vassal_or_below = {
				every_courtier = {
					limit = {
						dynasty = scope:activity.activity_owner.dynasty
						OR = {
							is_available_for_activity_trigger = yes
							is_available_for_child_activity_trigger = yes
						}
					}
					add_to_temporary_list = potential_guests
				}
			}
			every_in_list = {
				list = potential_guests
				scope:activity = {
					invite_character_to_activity = prev
				}
				# Invitations
				trigger_event = {
					id = ancestor_worship.0001
					days = 1
				}
			}
		}
	}
	on_activate = {
		activity_owner = { # The host gets their events
			# The key event is chosen for the host, and fires other events from there to every participant:
			trigger_event = ancestor_worship.0002
		}
		every_participant = {
			limit = { 
				NOT = { this = scope:activity.activity_owner }
			}
			#Remove blocker for invitations to feasts (the feast is now active and will work as a blocker)
			remove_variable = booked_for_a_party
			trigger_event = ancestor_worship.0003
		}
	}
	on_complete = {
		every_participant = {
			limit = {
				NOT = { this = scope:host }
			}
			if = {
				limit = {
					has_character_flag = planning_an_activity
				}
				remove_character_flag = planning_an_activity
			}
		}
		activity_owner = {
			remove_character_flag = planning_an_activity
		}	
	}
	on_expire = { # Should never happen - kept as fallback for weirdness only
		every_participant = {
			limit = {
				NOT = { this = scope:host }
			}
			if = {
				limit = {
					has_character_flag = planning_an_activity
				}
				remove_character_flag = planning_an_activity
			}
		}
		activity_owner = {
			remove_character_flag = planning_an_activity
		}
	}
	
	on_participant_death = {
	
	}
	on_invalidated = {
		activity_owner = {
			if = {
				limit = {
					has_character_flag = planning_an_activity
				}
				remove_character_flag = planning_an_activity
			}
			save_scope_as = host
		}
		every_participant = {
			limit = {
				NOT = { this = scope:host }
			}
			if = {
				limit = {
					has_character_flag = planning_an_activity
				}
				remove_character_flag = planning_an_activity
			}
		}
		complete_activity = yes
	}
}


